---
import { storyblokEditable } from '@storyblok/astro';
import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro';
import Text from '~/storyblok/Text.astro';
import { cn } from '~/lib/utils';
import { Image } from 'astro:assets';

const { blok } = Astro.props;
const { variant, heroClasses, sectionClasses, blocks, images } = blok;

const listItems = blocks.filter(block => block.component === 'list');
const buttonItems = blocks.filter(block => block.component === 'button');
const badgeItems = blocks.filter(block => block.component === 'badge');
---

<section
  id="parallax-hero"
  {...storyblokEditable(blok)}
  class={cn(sectionClasses, 'relative bg-cover bg-center')}
  style={`background-image: url(${images?.[0]?.filename || ''}); background-position: center center; transition: background-position 0.15s ease-out;`}
>
  <div
    class={cn(
      heroClasses,
      'absolute inset-0 bg-gradient-to-tr from-black via-black/60 to-transparent lg:bg-gradient-to-r lg:from-black/90 lg:via-black/70 lg:to-transparent'
    )}
  >
  </div>

  {
    images?.[1]?.filename && (
      <div class="absolute top-10 right-10 z-20 bg-white/95 p-4 border-3 border-primary hidden lg:block lg:max-w-72">
        <Image
          src={images[1].filename}
          alt={images[1].alt || ''}
          inferSize={true}
          class="w-full lg:max-h-36"
        />
      </div>
    )
  }

  <div class="container relative z-10">
    <div class="flex flex-col gap-4 md:gap-6 md:w-2/3 lg:gap-8 lg:w-1/2 dark">
      {badgeItems?.map(badge => <StoryblokComponent blok={badge} />)}

      <Text
        blok={{
          text: blok.headline,
          textClasses: 'prose prose-invert prose-sm lg:prose-lg prose-headings:m-0 prose-p:m-0',
        }}
      />

      {listItems?.map(item => <StoryblokComponent blok={item} />)}

      {
        buttonItems?.length > 0 && (
          <div class="flex gap-3 flex-wrap">
            {buttonItems?.map(button => (
              <StoryblokComponent blok={button} />
            ))}
          </div>
        )
      }
    </div>
  </div>
</section>

{
  images?.[1]?.filename && (
    <div class="bottom-0 left-0 right-0 bg-white/95 p-5 lg:hidden border-t-3 border-primary">
      <Image
        src={images[1].filename}
        alt={images[1].alt || ''}
        inferSize={true}
        class="mx-auto max-w-56 max-h-36 object-contain"
      />
    </div>
  )
}

<!-- <script>
  document.addEventListener('DOMContentLoaded', () => {
    const hero = document.getElementById('parallax-hero');
    if (!hero) return;

    let ticking = false;

    const updateParallax = () => {
      const scrollY = window.pageYOffset;
      const rate = scrollY * -0.5; // Adjust this value for more/less parallax effect

      hero.style.backgroundPosition = `center ${rate}px`;
      ticking = false;
    };

    const requestTick = () => {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
      }
    };

    // Set initial position to prevent jump
    updateParallax();

    window.addEventListener('scroll', requestTick, { passive: true });
  });
</script> -->
