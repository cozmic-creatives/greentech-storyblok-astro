---
description: 
globs: 
alwaysApply: false
---
# Development Workflow

This guide covers the typical development workflow for this Astro + Storyblok project.

## Getting Started

1. Install dependencies:
   ```bash
   npm install
   ```

2. Set up environment variables:
   - Create a `.env` file with your Storyblok token
   - Example: `STORYBLOK_PREVIEW_TOKEN=your_token_here`

3. Start the development server:
   ```bash
   npm run dev
   ```

## Working with Storyblok

### Content Editing

1. Create/edit content in the Storyblok visual editor
2. Preview changes in real-time through the development server

### Component Development

1. Create a new Storyblok component in the Storyblok UI
2. Run type generation: `npm run storyblok:generate-types`
3. Create a matching component in [src/storyblok/](mdc:src/storyblok)
4. Add the component mapping in [astro.config.mjs](mdc:astro.config.mjs)

## Build Process

### Preview Build

```bash
npm run build:preview
```
- Creates a server-rendered (SSR) build
- Enables Storyblok visual editor integration
- Uses the `@astrojs/node` adapter

### Production Build

```bash
npm run build:production
```
- Creates a static site build
- Optimized for production deployment
- No Storyblok visual editor integration

## Testing Locally

To test the production build locally:
```bash
npm run build:production
npm run preview
```

## Code Formatting

The project uses Prettier for code formatting, configured in [.prettierrc](mdc:.prettierrc).

## TypeScript

TypeScript configuration is in [tsconfig.json](mdc:tsconfig.json). Custom type definitions for the project are in [src/types/](mdc:src/types).
