# Hybrid Deployment Dockerfile
# Serves static pages via nginx and SSR pages via Node.js
# Perfect for Astro's on-demand rendering with prerender: false

# Build stage
FROM node:lts-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build:production

# Runtime stage - nginx + Node.js
FROM node:lts-alpine AS runtime

# Install nginx and supervisor for process management  
RUN apk add --no-cache nginx

# Copy nginx configuration and proxy parameters
COPY ./nginx/nginx.hybrid.conf /etc/nginx/nginx.conf
COPY ./nginx/proxy_params /etc/nginx/conf.d/proxy_params

# Copy built assets
COPY --from=build /app/dist/client /usr/share/nginx/html
COPY --from=build /app/dist/server /app/server
COPY --from=build /app/package*.json /app/
COPY --from=build /app/.env* /app/

# Install all dependencies for the server (needed for Storyblok and other runtime deps)
WORKDIR /app
RUN npm ci

# Set environment variables for configuration
ENV DOMAIN=greentechmachinery.co.za \
    NODE_PORT=3000 \
    NGINX_PORT=80

# Create startup script
COPY <<EOF /app/start.sh
#!/bin/sh
# Start Node.js server in background
# Use environment variables for clean configuration
cd /app && HOST=0.0.0.0 PORT=\${NODE_PORT} ORIGIN=https://\${DOMAIN} PROTOCOL_HEADER=x-forwarded-proto HOST_HEADER=x-forwarded-host node server/entry.mjs &
# Start nginx in foreground  
nginx -g "daemon off;"
EOF

RUN chmod +x /app/start.sh

# Create nginx directories
RUN mkdir -p /var/log/nginx /var/lib/nginx/tmp /run/nginx

# Expose port 80 (nginx will listen on 80 internally)
EXPOSE 80

# Start both services
CMD ["/app/start.sh"]